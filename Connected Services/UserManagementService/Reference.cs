//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LabyrinthClient.UserManagementService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferUser", Namespace="http://schemas.datacontract.org/2004/07/UserManagementService")]
    [System.SerializableAttribute()]
    public partial class TransferUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfilePictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LabyrinthClient.UserManagementService.TransferCountry TransferCountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Country {
            get {
                return this.CountryField;
            }
            set {
                if ((this.CountryField.Equals(value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfilePicture {
            get {
                return this.ProfilePictureField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePictureField, value) != true)) {
                    this.ProfilePictureField = value;
                    this.RaisePropertyChanged("ProfilePicture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LabyrinthClient.UserManagementService.TransferCountry TransferCountry {
            get {
                return this.TransferCountryField;
            }
            set {
                if ((object.ReferenceEquals(this.TransferCountryField, value) != true)) {
                    this.TransferCountryField = value;
                    this.RaisePropertyChanged("TransferCountry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferCountry", Namespace="http://schemas.datacontract.org/2004/07/CatalogManagementService")]
    [System.SerializableAttribute()]
    public partial class TransferCountry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryName {
            get {
                return this.CountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryNameField, value) != true)) {
                    this.CountryNameField = value;
                    this.RaisePropertyChanged("CountryName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserManagementService.IUserManagement")]
    public interface IUserManagement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/AddUser", ReplyAction="http://tempuri.org/IUserManagement/AddUserResponse")]
        int AddUser(LabyrinthClient.UserManagementService.TransferUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/AddUser", ReplyAction="http://tempuri.org/IUserManagement/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(LabyrinthClient.UserManagementService.TransferUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/UserVerification", ReplyAction="http://tempuri.org/IUserManagement/UserVerificationResponse")]
        LabyrinthClient.UserManagementService.TransferUser UserVerification(LabyrinthClient.UserManagementService.TransferUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/UserVerification", ReplyAction="http://tempuri.org/IUserManagement/UserVerificationResponse")]
        System.Threading.Tasks.Task<LabyrinthClient.UserManagementService.TransferUser> UserVerificationAsync(LabyrinthClient.UserManagementService.TransferUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/UpdateUser", ReplyAction="http://tempuri.org/IUserManagement/UpdateUserResponse")]
        int UpdateUser(LabyrinthClient.UserManagementService.TransferUser newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/UpdateUser", ReplyAction="http://tempuri.org/IUserManagement/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(LabyrinthClient.UserManagementService.TransferUser newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/ChangeUserProfilePicture", ReplyAction="http://tempuri.org/IUserManagement/ChangeUserProfilePictureResponse")]
        string ChangeUserProfilePicture(int userId, byte[] imagenData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/ChangeUserProfilePicture", ReplyAction="http://tempuri.org/IUserManagement/ChangeUserProfilePictureResponse")]
        System.Threading.Tasks.Task<string> ChangeUserProfilePictureAsync(int userId, byte[] imagenData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/GetUserProfilePicture", ReplyAction="http://tempuri.org/IUserManagement/GetUserProfilePictureResponse")]
        byte[] GetUserProfilePicture(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/GetUserProfilePicture", ReplyAction="http://tempuri.org/IUserManagement/GetUserProfilePictureResponse")]
        System.Threading.Tasks.Task<byte[]> GetUserProfilePictureAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/VerificateCode", ReplyAction="http://tempuri.org/IUserManagement/VerificateCodeResponse")]
        bool VerificateCode(string email, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/VerificateCode", ReplyAction="http://tempuri.org/IUserManagement/VerificateCodeResponse")]
        System.Threading.Tasks.Task<bool> VerificateCodeAsync(string email, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/AddVerificationCode", ReplyAction="http://tempuri.org/IUserManagement/AddVerificationCodeResponse")]
        int AddVerificationCode(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/AddVerificationCode", ReplyAction="http://tempuri.org/IUserManagement/AddVerificationCodeResponse")]
        System.Threading.Tasks.Task<int> AddVerificationCodeAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/IsEmailRegistered", ReplyAction="http://tempuri.org/IUserManagement/IsEmailRegisteredResponse")]
        bool IsEmailRegistered(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/IsEmailRegistered", ReplyAction="http://tempuri.org/IUserManagement/IsEmailRegisteredResponse")]
        System.Threading.Tasks.Task<bool> IsEmailRegisteredAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/DeleteAllVerificationCodes", ReplyAction="http://tempuri.org/IUserManagement/DeleteAllVerificationCodesResponse")]
        int DeleteAllVerificationCodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManagement/DeleteAllVerificationCodes", ReplyAction="http://tempuri.org/IUserManagement/DeleteAllVerificationCodesResponse")]
        System.Threading.Tasks.Task<int> DeleteAllVerificationCodesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagementChannel : LabyrinthClient.UserManagementService.IUserManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagementClient : System.ServiceModel.ClientBase<LabyrinthClient.UserManagementService.IUserManagement>, LabyrinthClient.UserManagementService.IUserManagement {
        
        public UserManagementClient() {
        }
        
        public UserManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddUser(LabyrinthClient.UserManagementService.TransferUser user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(LabyrinthClient.UserManagementService.TransferUser user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public LabyrinthClient.UserManagementService.TransferUser UserVerification(LabyrinthClient.UserManagementService.TransferUser user) {
            return base.Channel.UserVerification(user);
        }
        
        public System.Threading.Tasks.Task<LabyrinthClient.UserManagementService.TransferUser> UserVerificationAsync(LabyrinthClient.UserManagementService.TransferUser user) {
            return base.Channel.UserVerificationAsync(user);
        }
        
        public int UpdateUser(LabyrinthClient.UserManagementService.TransferUser newUser) {
            return base.Channel.UpdateUser(newUser);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(LabyrinthClient.UserManagementService.TransferUser newUser) {
            return base.Channel.UpdateUserAsync(newUser);
        }
        
        public string ChangeUserProfilePicture(int userId, byte[] imagenData) {
            return base.Channel.ChangeUserProfilePicture(userId, imagenData);
        }
        
        public System.Threading.Tasks.Task<string> ChangeUserProfilePictureAsync(int userId, byte[] imagenData) {
            return base.Channel.ChangeUserProfilePictureAsync(userId, imagenData);
        }
        
        public byte[] GetUserProfilePicture(string path) {
            return base.Channel.GetUserProfilePicture(path);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetUserProfilePictureAsync(string path) {
            return base.Channel.GetUserProfilePictureAsync(path);
        }
        
        public bool VerificateCode(string email, string code) {
            return base.Channel.VerificateCode(email, code);
        }
        
        public System.Threading.Tasks.Task<bool> VerificateCodeAsync(string email, string code) {
            return base.Channel.VerificateCodeAsync(email, code);
        }
        
        public int AddVerificationCode(string email) {
            return base.Channel.AddVerificationCode(email);
        }
        
        public System.Threading.Tasks.Task<int> AddVerificationCodeAsync(string email) {
            return base.Channel.AddVerificationCodeAsync(email);
        }
        
        public bool IsEmailRegistered(string email) {
            return base.Channel.IsEmailRegistered(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmailRegisteredAsync(string email) {
            return base.Channel.IsEmailRegisteredAsync(email);
        }
        
        public int DeleteAllVerificationCodes() {
            return base.Channel.DeleteAllVerificationCodes();
        }
        
        public System.Threading.Tasks.Task<int> DeleteAllVerificationCodesAsync() {
            return base.Channel.DeleteAllVerificationCodesAsync();
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LabyrinthClient.GameService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferPlayer", Namespace="http://schemas.datacontract.org/2004/07/LabyrinthCommon")]
    [System.SerializableAttribute()]
    public partial class TransferPlayer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InactivityCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.ValueTuple<int, int> InitialPositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SkinPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] TreasuresForSearchingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InactivityCount {
            get {
                return this.InactivityCountField;
            }
            set {
                if ((this.InactivityCountField.Equals(value) != true)) {
                    this.InactivityCountField = value;
                    this.RaisePropertyChanged("InactivityCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.ValueTuple<int, int> InitialPosition {
            get {
                return this.InitialPositionField;
            }
            set {
                if ((this.InitialPositionField.Equals(value) != true)) {
                    this.InitialPositionField = value;
                    this.RaisePropertyChanged("InitialPosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SkinPath {
            get {
                return this.SkinPathField;
            }
            set {
                if ((object.ReferenceEquals(this.SkinPathField, value) != true)) {
                    this.SkinPathField = value;
                    this.RaisePropertyChanged("SkinPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] TreasuresForSearching {
            get {
                return this.TreasuresForSearchingField;
            }
            set {
                if ((object.ReferenceEquals(this.TreasuresForSearchingField, value) != true)) {
                    this.TreasuresForSearchingField = value;
                    this.RaisePropertyChanged("TreasuresForSearching");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LabyrinthException", Namespace="http://schemas.datacontract.org/2004/07/LabyrinthCommon")]
    [System.SerializableAttribute()]
    public partial class LabyrinthException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferGameBoard", Namespace="http://schemas.datacontract.org/2004/07/LabyrinthCommon")]
    [System.SerializableAttribute()]
    public partial class TransferGameBoard : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LabyrinthClient.GameService.TransferTile ExtraTileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsClassicSelectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxTreasuresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LabyrinthClient.GameService.TransferPlayer[] PlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] TilesPositionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LabyrinthClient.GameService.TransferTile ExtraTile {
            get {
                return this.ExtraTileField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtraTileField, value) != true)) {
                    this.ExtraTileField = value;
                    this.RaisePropertyChanged("ExtraTile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsClassicSelected {
            get {
                return this.IsClassicSelectedField;
            }
            set {
                if ((this.IsClassicSelectedField.Equals(value) != true)) {
                    this.IsClassicSelectedField = value;
                    this.RaisePropertyChanged("IsClassicSelected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxTreasures {
            get {
                return this.MaxTreasuresField;
            }
            set {
                if ((this.MaxTreasuresField.Equals(value) != true)) {
                    this.MaxTreasuresField = value;
                    this.RaisePropertyChanged("MaxTreasures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LabyrinthClient.GameService.TransferPlayer[] Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] TilesPositions {
            get {
                return this.TilesPositionsField;
            }
            set {
                if ((object.ReferenceEquals(this.TilesPositionsField, value) != true)) {
                    this.TilesPositionsField = value;
                    this.RaisePropertyChanged("TilesPositions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferTile", Namespace="http://schemas.datacontract.org/2004/07/LabyrinthCommon")]
    [System.SerializableAttribute()]
    public partial class TransferTile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImagePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsBottomOpenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLeftOpenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRightOpenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTopOpenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LabyrinthClient.GameService.TransferPlayer[] PlayerOnTileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RotationAngleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LabyrinthClient.GameService.TransferTreasure TreasureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImagePath {
            get {
                return this.ImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagePathField, value) != true)) {
                    this.ImagePathField = value;
                    this.RaisePropertyChanged("ImagePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBottomOpen {
            get {
                return this.IsBottomOpenField;
            }
            set {
                if ((this.IsBottomOpenField.Equals(value) != true)) {
                    this.IsBottomOpenField = value;
                    this.RaisePropertyChanged("IsBottomOpen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLeftOpen {
            get {
                return this.IsLeftOpenField;
            }
            set {
                if ((this.IsLeftOpenField.Equals(value) != true)) {
                    this.IsLeftOpenField = value;
                    this.RaisePropertyChanged("IsLeftOpen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRightOpen {
            get {
                return this.IsRightOpenField;
            }
            set {
                if ((this.IsRightOpenField.Equals(value) != true)) {
                    this.IsRightOpenField = value;
                    this.RaisePropertyChanged("IsRightOpen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTopOpen {
            get {
                return this.IsTopOpenField;
            }
            set {
                if ((this.IsTopOpenField.Equals(value) != true)) {
                    this.IsTopOpenField = value;
                    this.RaisePropertyChanged("IsTopOpen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LabyrinthClient.GameService.TransferPlayer[] PlayerOnTile {
            get {
                return this.PlayerOnTileField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerOnTileField, value) != true)) {
                    this.PlayerOnTileField = value;
                    this.RaisePropertyChanged("PlayerOnTile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RotationAngle {
            get {
                return this.RotationAngleField;
            }
            set {
                if ((this.RotationAngleField.Equals(value) != true)) {
                    this.RotationAngleField = value;
                    this.RaisePropertyChanged("RotationAngle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LabyrinthClient.GameService.TransferTreasure Treasure {
            get {
                return this.TreasureField;
            }
            set {
                if ((object.ReferenceEquals(this.TreasureField, value) != true)) {
                    this.TreasureField = value;
                    this.RaisePropertyChanged("Treasure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferTreasure", Namespace="http://schemas.datacontract.org/2004/07/LabyrinthCommon")]
    [System.SerializableAttribute()]
    public partial class TransferTreasure : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImagePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFoundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImagePath {
            get {
                return this.ImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagePathField, value) != true)) {
                    this.ImagePathField = value;
                    this.RaisePropertyChanged("ImagePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFound {
            get {
                return this.IsFoundField;
            }
            set {
                if ((this.IsFoundField.Equals(value) != true)) {
                    this.IsFoundField = value;
                    this.RaisePropertyChanged("IsFound");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameService.IGameService", CallbackContract=typeof(LabyrinthClient.GameService.IGameServiceCallback))]
    public interface IGameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Start", ReplyAction="http://tempuri.org/IGameService/StartResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LabyrinthClient.GameService.LabyrinthException), Action="http://tempuri.org/IGameService/StartLabyrinthExceptionFault", Name="LabyrinthException", Namespace="http://schemas.datacontract.org/2004/07/LabyrinthCommon")]
        int Start(string lobbyCode, LabyrinthClient.GameService.TransferPlayer lobbyCreator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Start", ReplyAction="http://tempuri.org/IGameService/StartResponse")]
        System.Threading.Tasks.Task<int> StartAsync(string lobbyCode, LabyrinthClient.GameService.TransferPlayer lobbyCreator);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/JoinToGame")]
        void JoinToGame(string lobbyCode, LabyrinthClient.GameService.TransferPlayer user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/JoinToGame")]
        System.Threading.Tasks.Task JoinToGameAsync(string lobbyCode, LabyrinthClient.GameService.TransferPlayer user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RemoveUserFromGame", ReplyAction="http://tempuri.org/IGameService/RemoveUserFromGameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LabyrinthClient.GameService.LabyrinthException), Action="http://tempuri.org/IGameService/RemoveUserFromGameLabyrinthExceptionFault", Name="LabyrinthException", Namespace="http://schemas.datacontract.org/2004/07/LabyrinthCommon")]
        int RemoveUserFromGame(string lobbyCode, LabyrinthClient.GameService.TransferPlayer user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RemoveUserFromGame", ReplyAction="http://tempuri.org/IGameService/RemoveUserFromGameResponse")]
        System.Threading.Tasks.Task<int> RemoveUserFromGameAsync(string lobbyCode, LabyrinthClient.GameService.TransferPlayer user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ChangeGameStatus", ReplyAction="http://tempuri.org/IGameService/ChangeGameStatusResponse")]
        void ChangeGameStatus(string lobbyCode, bool isStarted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ChangeGameStatus", ReplyAction="http://tempuri.org/IGameService/ChangeGameStatusResponse")]
        System.Threading.Tasks.Task ChangeGameStatusAsync(string lobbyCode, bool isStarted);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SendGameBoardToLobby")]
        void SendGameBoardToLobby(string lobbyCode, LabyrinthClient.GameService.TransferGameBoard gameBoard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SendGameBoardToLobby")]
        System.Threading.Tasks.Task SendGameBoardToLobbyAsync(string lobbyCode, LabyrinthClient.GameService.TransferGameBoard gameBoard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SelectCharacter")]
        void SelectCharacter(string lobbyCode, string username, string character);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SelectCharacter")]
        System.Threading.Tasks.Task SelectCharacterAsync(string lobbyCode, string username, string character);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/AsignTurn")]
        void AsignTurn(string lobbyCode, LabyrinthClient.GameService.TransferPlayer currentUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/AsignTurn")]
        System.Threading.Tasks.Task AsignTurnAsync(string lobbyCode, LabyrinthClient.GameService.TransferPlayer currentUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/MovePlayer")]
        void MovePlayer(string lobbyCode, string username, string direction);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/MovePlayer")]
        System.Threading.Tasks.Task MovePlayerAsync(string lobbyCode, string username, string direction);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/MoveRow")]
        void MoveRow(string lobbyCode, string direction, int indexRow, bool toRight);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/MoveRow")]
        System.Threading.Tasks.Task MoveRowAsync(string lobbyCode, string direction, int indexRow, bool toRight);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/MoveColumn")]
        void MoveColumn(string lobbyCode, string direction, int indexRow, bool toRight);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/MoveColumn")]
        System.Threading.Tasks.Task MoveColumnAsync(string lobbyCode, string direction, int indexRow, bool toRight);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/RotateTile")]
        void RotateTile(string lobbyCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/RotateTile")]
        System.Threading.Tasks.Task RotateTileAsync(string lobbyCode, string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ReceiveGameBoard", ReplyAction="http://tempuri.org/IGameService/ReceiveGameBoardResponse")]
        void ReceiveGameBoard(LabyrinthClient.GameService.TransferGameBoard gameBoard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/NotifyTurn", ReplyAction="http://tempuri.org/IGameService/NotifyTurnResponse")]
        void NotifyTurn(LabyrinthClient.GameService.TransferPlayer currentPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/NotifyPlayerHasJoined", ReplyAction="http://tempuri.org/IGameService/NotifyPlayerHasJoinedResponse")]
        void NotifyPlayerHasJoined(LabyrinthClient.GameService.TransferPlayer player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/MovePlayerOnTile", ReplyAction="http://tempuri.org/IGameService/MovePlayerOnTileResponse")]
        void MovePlayerOnTile(string username, string direction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/MoveRowOnBoard", ReplyAction="http://tempuri.org/IGameService/MoveRowOnBoardResponse")]
        void MoveRowOnBoard(string direction, int indexRow, bool toRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/MoveColumnOnBoard", ReplyAction="http://tempuri.org/IGameService/MoveColumnOnBoardResponse")]
        void MoveColumnOnBoard(string direction, int indexRow, bool toRight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/UpdatePlayerCharacter", ReplyAction="http://tempuri.org/IGameService/UpdatePlayerCharacterResponse")]
        void UpdatePlayerCharacter(string username, string character);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/BroadcastExtraTileRotation", ReplyAction="http://tempuri.org/IGameService/BroadcastExtraTileRotationResponse")]
        void BroadcastExtraTileRotation(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceChannel : LabyrinthClient.GameService.IGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServiceClient : System.ServiceModel.DuplexClientBase<LabyrinthClient.GameService.IGameService>, LabyrinthClient.GameService.IGameService {
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Start(string lobbyCode, LabyrinthClient.GameService.TransferPlayer lobbyCreator) {
            return base.Channel.Start(lobbyCode, lobbyCreator);
        }
        
        public System.Threading.Tasks.Task<int> StartAsync(string lobbyCode, LabyrinthClient.GameService.TransferPlayer lobbyCreator) {
            return base.Channel.StartAsync(lobbyCode, lobbyCreator);
        }
        
        public void JoinToGame(string lobbyCode, LabyrinthClient.GameService.TransferPlayer user) {
            base.Channel.JoinToGame(lobbyCode, user);
        }
        
        public System.Threading.Tasks.Task JoinToGameAsync(string lobbyCode, LabyrinthClient.GameService.TransferPlayer user) {
            return base.Channel.JoinToGameAsync(lobbyCode, user);
        }
        
        public int RemoveUserFromGame(string lobbyCode, LabyrinthClient.GameService.TransferPlayer user) {
            return base.Channel.RemoveUserFromGame(lobbyCode, user);
        }
        
        public System.Threading.Tasks.Task<int> RemoveUserFromGameAsync(string lobbyCode, LabyrinthClient.GameService.TransferPlayer user) {
            return base.Channel.RemoveUserFromGameAsync(lobbyCode, user);
        }
        
        public void ChangeGameStatus(string lobbyCode, bool isStarted) {
            base.Channel.ChangeGameStatus(lobbyCode, isStarted);
        }
        
        public System.Threading.Tasks.Task ChangeGameStatusAsync(string lobbyCode, bool isStarted) {
            return base.Channel.ChangeGameStatusAsync(lobbyCode, isStarted);
        }
        
        public void SendGameBoardToLobby(string lobbyCode, LabyrinthClient.GameService.TransferGameBoard gameBoard) {
            base.Channel.SendGameBoardToLobby(lobbyCode, gameBoard);
        }
        
        public System.Threading.Tasks.Task SendGameBoardToLobbyAsync(string lobbyCode, LabyrinthClient.GameService.TransferGameBoard gameBoard) {
            return base.Channel.SendGameBoardToLobbyAsync(lobbyCode, gameBoard);
        }
        
        public void SelectCharacter(string lobbyCode, string username, string character) {
            base.Channel.SelectCharacter(lobbyCode, username, character);
        }
        
        public System.Threading.Tasks.Task SelectCharacterAsync(string lobbyCode, string username, string character) {
            return base.Channel.SelectCharacterAsync(lobbyCode, username, character);
        }
        
        public void AsignTurn(string lobbyCode, LabyrinthClient.GameService.TransferPlayer currentUser) {
            base.Channel.AsignTurn(lobbyCode, currentUser);
        }
        
        public System.Threading.Tasks.Task AsignTurnAsync(string lobbyCode, LabyrinthClient.GameService.TransferPlayer currentUser) {
            return base.Channel.AsignTurnAsync(lobbyCode, currentUser);
        }
        
        public void MovePlayer(string lobbyCode, string username, string direction) {
            base.Channel.MovePlayer(lobbyCode, username, direction);
        }
        
        public System.Threading.Tasks.Task MovePlayerAsync(string lobbyCode, string username, string direction) {
            return base.Channel.MovePlayerAsync(lobbyCode, username, direction);
        }
        
        public void MoveRow(string lobbyCode, string direction, int indexRow, bool toRight) {
            base.Channel.MoveRow(lobbyCode, direction, indexRow, toRight);
        }
        
        public System.Threading.Tasks.Task MoveRowAsync(string lobbyCode, string direction, int indexRow, bool toRight) {
            return base.Channel.MoveRowAsync(lobbyCode, direction, indexRow, toRight);
        }
        
        public void MoveColumn(string lobbyCode, string direction, int indexRow, bool toRight) {
            base.Channel.MoveColumn(lobbyCode, direction, indexRow, toRight);
        }
        
        public System.Threading.Tasks.Task MoveColumnAsync(string lobbyCode, string direction, int indexRow, bool toRight) {
            return base.Channel.MoveColumnAsync(lobbyCode, direction, indexRow, toRight);
        }
        
        public void RotateTile(string lobbyCode, string username) {
            base.Channel.RotateTile(lobbyCode, username);
        }
        
        public System.Threading.Tasks.Task RotateTileAsync(string lobbyCode, string username) {
            return base.Channel.RotateTileAsync(lobbyCode, username);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LabyrinthClient.MenuManagementService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferUser", Namespace="http://schemas.datacontract.org/2004/07/LabyrinthCommon")]
    [System.SerializableAttribute()]
    public partial class TransferUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfilePictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LabyrinthClient.MenuManagementService.TransferStats TransferStatsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCode {
            get {
                return this.CountryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryCodeField, value) != true)) {
                    this.CountryCodeField = value;
                    this.RaisePropertyChanged("CountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfilePicture {
            get {
                return this.ProfilePictureField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePictureField, value) != true)) {
                    this.ProfilePictureField = value;
                    this.RaisePropertyChanged("ProfilePicture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LabyrinthClient.MenuManagementService.TransferStats TransferStats {
            get {
                return this.TransferStatsField;
            }
            set {
                if ((object.ReferenceEquals(this.TransferStatsField, value) != true)) {
                    this.TransferStatsField = value;
                    this.RaisePropertyChanged("TransferStats");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferStats", Namespace="http://schemas.datacontract.org/2004/07/LabyrinthCommon")]
    [System.SerializableAttribute()]
    public partial class TransferStats : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GamesPlayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GamesWonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GamesPlayed {
            get {
                return this.GamesPlayedField;
            }
            set {
                if ((this.GamesPlayedField.Equals(value) != true)) {
                    this.GamesPlayedField = value;
                    this.RaisePropertyChanged("GamesPlayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GamesWon {
            get {
                return this.GamesWonField;
            }
            set {
                if ((this.GamesWonField.Equals(value) != true)) {
                    this.GamesWonField = value;
                    this.RaisePropertyChanged("GamesWon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatId {
            get {
                return this.StatIdField;
            }
            set {
                if ((this.StatIdField.Equals(value) != true)) {
                    this.StatIdField = value;
                    this.RaisePropertyChanged("StatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LabyrinthException", Namespace="http://schemas.datacontract.org/2004/07/LabyrinthCommon")]
    [System.SerializableAttribute()]
    public partial class LabyrinthException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorCodeField, value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MenuManagementService.IMenuManagementService", CallbackContract=typeof(LabyrinthClient.MenuManagementService.IMenuManagementServiceCallback))]
    public interface IMenuManagementService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMenuManagementService/Start", ReplyAction="http://tempuri.org/IMenuManagementService/StartResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LabyrinthClient.MenuManagementService.LabyrinthException), Action="http://tempuri.org/IMenuManagementService/StartLabyrinthExceptionFault", Name="LabyrinthException", Namespace="http://schemas.datacontract.org/2004/07/LabyrinthCommon")]
        int Start(LabyrinthClient.MenuManagementService.TransferUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMenuManagementService/Start", ReplyAction="http://tempuri.org/IMenuManagementService/StartResponse")]
        System.Threading.Tasks.Task<int> StartAsync(LabyrinthClient.MenuManagementService.TransferUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMenuManagementService/ChangeAvailability", ReplyAction="http://tempuri.org/IMenuManagementService/ChangeAvailabilityResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LabyrinthClient.MenuManagementService.LabyrinthException), Action="http://tempuri.org/IMenuManagementService/ChangeAvailabilityLabyrinthExceptionFau" +
            "lt", Name="LabyrinthException", Namespace="http://schemas.datacontract.org/2004/07/LabyrinthCommon")]
        int ChangeAvailability(LabyrinthClient.MenuManagementService.TransferUser user, bool availability);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMenuManagementService/ChangeAvailability", ReplyAction="http://tempuri.org/IMenuManagementService/ChangeAvailabilityResponse")]
        System.Threading.Tasks.Task<int> ChangeAvailabilityAsync(LabyrinthClient.MenuManagementService.TransferUser user, bool availability);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMenuManagementService/InviteFriend")]
        void InviteFriend(LabyrinthClient.MenuManagementService.TransferUser inviter, LabyrinthClient.MenuManagementService.TransferUser invitee, string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMenuManagementService/InviteFriend")]
        System.Threading.Tasks.Task InviteFriendAsync(LabyrinthClient.MenuManagementService.TransferUser inviter, LabyrinthClient.MenuManagementService.TransferUser invitee, string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMenuManagementService/UpdateCallback", ReplyAction="http://tempuri.org/IMenuManagementService/UpdateCallbackResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LabyrinthClient.MenuManagementService.LabyrinthException), Action="http://tempuri.org/IMenuManagementService/UpdateCallbackLabyrinthExceptionFault", Name="LabyrinthException", Namespace="http://schemas.datacontract.org/2004/07/LabyrinthCommon")]
        int UpdateCallback(LabyrinthClient.MenuManagementService.TransferUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMenuManagementService/UpdateCallback", ReplyAction="http://tempuri.org/IMenuManagementService/UpdateCallbackResponse")]
        System.Threading.Tasks.Task<int> UpdateCallbackAsync(LabyrinthClient.MenuManagementService.TransferUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMenuManagementService/DeleteUsers", ReplyAction="http://tempuri.org/IMenuManagementService/DeleteUsersResponse")]
        void DeleteUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMenuManagementService/DeleteUsers", ReplyAction="http://tempuri.org/IMenuManagementService/DeleteUsersResponse")]
        System.Threading.Tasks.Task DeleteUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMenuManagementServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMenuManagementService/AttendInvitation", ReplyAction="http://tempuri.org/IMenuManagementService/AttendInvitationResponse")]
        void AttendInvitation(LabyrinthClient.MenuManagementService.TransferUser inviter, string lobbyCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMenuManagementServiceChannel : LabyrinthClient.MenuManagementService.IMenuManagementService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MenuManagementServiceClient : System.ServiceModel.DuplexClientBase<LabyrinthClient.MenuManagementService.IMenuManagementService>, LabyrinthClient.MenuManagementService.IMenuManagementService {
        
        public MenuManagementServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MenuManagementServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MenuManagementServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MenuManagementServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MenuManagementServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Start(LabyrinthClient.MenuManagementService.TransferUser user) {
            return base.Channel.Start(user);
        }
        
        public System.Threading.Tasks.Task<int> StartAsync(LabyrinthClient.MenuManagementService.TransferUser user) {
            return base.Channel.StartAsync(user);
        }
        
        public int ChangeAvailability(LabyrinthClient.MenuManagementService.TransferUser user, bool availability) {
            return base.Channel.ChangeAvailability(user, availability);
        }
        
        public System.Threading.Tasks.Task<int> ChangeAvailabilityAsync(LabyrinthClient.MenuManagementService.TransferUser user, bool availability) {
            return base.Channel.ChangeAvailabilityAsync(user, availability);
        }
        
        public void InviteFriend(LabyrinthClient.MenuManagementService.TransferUser inviter, LabyrinthClient.MenuManagementService.TransferUser invitee, string lobbyCode) {
            base.Channel.InviteFriend(inviter, invitee, lobbyCode);
        }
        
        public System.Threading.Tasks.Task InviteFriendAsync(LabyrinthClient.MenuManagementService.TransferUser inviter, LabyrinthClient.MenuManagementService.TransferUser invitee, string lobbyCode) {
            return base.Channel.InviteFriendAsync(inviter, invitee, lobbyCode);
        }
        
        public int UpdateCallback(LabyrinthClient.MenuManagementService.TransferUser user) {
            return base.Channel.UpdateCallback(user);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCallbackAsync(LabyrinthClient.MenuManagementService.TransferUser user) {
            return base.Channel.UpdateCallbackAsync(user);
        }
        
        public void DeleteUsers() {
            base.Channel.DeleteUsers();
        }
        
        public System.Threading.Tasks.Task DeleteUsersAsync() {
            return base.Channel.DeleteUsersAsync();
        }
    }
}
